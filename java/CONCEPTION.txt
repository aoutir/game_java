CONCEPTIONSACTEURS,On a créé 2 classes intermédiaires entre AreaEntity qui représente tous les objets, et nos classes spécifiques à chaque objet. -La classe Collectable, qui hérite donc de AreaEntity et qui y rajoute dans le constructeur un attribut de type boolean « collecte » qui signifie si l’objet en question à été ramasser ou non. Cet attribut permet de gérer les interactions avec le Player ainsi que la présence des objets de type « Collectable » à l’écran (méthode draw par exemple)   // Les objets collectables sont donc : « Apple,Key,Sword,Helmet,Shield,Coin,Gold »Les classes -La classe ActivableObjects, qui hérite aussi de AreaEntity, et qui rajoute dans le constructeur un attribut de type boolean « active » qui agit un peu comme l’attribut « collecte » de la classe Collectable : On peut jouer sur le fait qu’un objet soit activé ou pas par le player en se servant des interactions à distance ou de contact entre le Player et cet objet. De ce fait, en modifiant l’attribut « active », on modifie les méthode « Draw() » et «takeCellSpace() » (ou d’autre méthode également ) des objets héritant de ActivableObjects, et qui permet de les rendre traversable ou pas et de les dessiner ou pas. -Les acteurs qui resteront figés (classes : OldMan,  Monster) hériteront de la classe « AreaEntity » car ils ne peuvent pas disparaître ou être collectés, mais doivent pouvoir être intéractible. 